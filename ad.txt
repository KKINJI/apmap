function setOverlayMapTypeId1() {
    
    var chkuseDistrict = document.getElementById('chkuseDistrict');
    
    // 지도 타입을 제거합니다
   for (var type in mapTypes) {
       map.removeOverlayMapTypeId(mapTypes[type]);    
   }
    // 지적편집도정보 체크박스가 체크되어있으면 지도에 지적편집도정보 지도타입을 추가합니다
        map.addOverlayMapTypeId(mapTypes.useDistrict);       
        btnGround.className = 'selected_btn';
        btnGroundHide.className = 'btn';     
} 

function setOverlayMapTypeId2() {
    
    var chkuseDistrict = document.getElementById('chkuseDistrict');
    // 지도 타입을 제거합니다
   for (var type in mapTypes) {
       map.removeOverlayMapTypeId(mapTypes[type]);    
   }
   
    btnGround.className = 'btn';
    btnGroundHide.className = 'selected_btn';     
      
} 




        function mapCurrentPosition2(){
    // 내 위치 표시

        navigator.geolocation.getCurrentPosition(function(pos) {

            myPosLat = pos.coords.latitude;
            myPosLng = pos.coords.longitude;

//			marker.setPosition(LatLng(myPosLat, myPosLng));
			myMarker.setPosition(new kakao.maps.LatLng(myPosLat, myPosLng));
            map.setCenter(new kakao.maps.LatLng(myPosLat, myPosLng));

			myMarker.setVisible(true);
        btnCurrentMe.className = 'selected_btn';
        btnCurrentHideMe.className = 'btn';     

        });
    //--내 위치 표시
}


function mapCurrentPositionHide(){
			myMarker.setVisible(false);
        btnCurrentMe.className = 'btn';
        btnCurrentHideMe.className = 'selected_btn';     
}

    
    
    function setMapType(maptype) { 
    var roadmapControl = document.getElementById('btnRoadmap');
    var skyviewControl = document.getElementById('btnSkyview'); 

    if (maptype === 'roadmap') {
        map.setMapTypeId(kakao.maps.MapTypeId.ROADMAP);    
        roadmapControl.className = 'selected_btn';
        skyviewControl.className = 'btn';      
    } 
    if (maptype === 'skyview') {
        map.setMapTypeId(kakao.maps.MapTypeId.HYBRID);    
        skyviewControl.className = 'selected_btn';
        roadmapControl.className = 'btn';        
    }
}

function setShowList() {

    if (chkshowlist.checked) {
        menu_wrap.style.visibility='visible'
    } else
    {
		menu_wrap.style.visibility='hidden'        
    }
}    

function setShowList1() {
        menu_wrap.style.visibility='visible';
        btnTitleList.className = 'selected_btn';
        btnTitleListHide.className = 'btn';      
}  

function setShowList2() {
		menu_wrap.style.visibility='hidden';
        btnTitleList.className = 'btn';
        btnTitleListHide.className = 'selected_btn';      
}  



    
function setCenter(Lat, Lng) {            

    if (Lat == null) {return 0};
    // 이동할 위도 경도 위치를 생성합니다 

    var moveLatLon = new kakao.maps.LatLng(Lat, Lng);
  
    // 지도 중심을 이동 시킵니다
        map.panTo(moveLatLon);
    var circle = new kakao.maps.Circle({
        center : new kakao.maps.LatLng(Lat,  Lng),  // 원의 중심좌표 입니다 
        radius: 100, // 미터 단위의 원의 반지름입니다 
        strokeWeight: 1, // 선의 두께입니다 
        strokeColor: '#ffa500', // 선의 색깔입니다
        strokeOpacity: 1, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: 'dashed', // 선의 스타일 입니다
        fillColor: '#FF0000', // 채우기 색깔입니다
        fillOpacity: 0.3  // 채우기 불투명도 입니다   
        }); 

    // 지도에 원을 표시합니다 
    circle.setMap(map);     
    setTimeout(function(){
    circle.setMap(null);    ;
    }, 2000);        
        
}


// 전달받은 좌표(position)에 가까운 로드뷰의 파노라마 ID를 추출하여
// 로드뷰를 설정하는 함수입니다
function toggleRoadview(position){
    rvClient.getNearestPanoId(position, 50, function(panoId) {
        // 파노라마 ID가 null 이면 로드뷰를 숨깁니다
        if (panoId === null) {
            toggleMapWrapper(true, position);
        } else {
         toggleMapWrapper(false, position);

            // panoId로 로드뷰를 설정합니다
            rv.setPanoId(panoId, position);
        }
    });
}

// 지도를 감싸고 있는 div의 크기를 조정하는 함수입니다
function toggleMapWrapper(active, position) {
    if (active) {
        // 지도를 감싸고 있는 div의 너비가 100%가 되도록 class를 변경합니다 
        container.className = '';
        // 지도의 크기가 변경되었기 때문에 relayout 함수를 호출합니다
        map.relayout();
        // 지도의 너비가 변경될 때 지도중심을 입력받은 위치(position)로 설정합니다
        map.setCenter(position);
    } else {
        // 지도만 보여지고 있는 상태이면 지도의 너비가 50%가 되도록 class를 변경하여
        // 로드뷰가 함께 표시되게 합니다
        if (container.className.indexOf('view_roadview') === -1) {
            container.className = 'view_roadview';
            // 지도의 크기가 변경되었기 때문에 relayout 함수를 호출합니다
            map.relayout();
            // 지도의 너비가 변경될 때 지도중심을 입력받은 위치(position)로 설정합니다
            map.setCenter(position);
        }
    }
}

// 지도 위의 로드뷰 도로 오버레이를 추가,제거하는 함수입니다
function toggleOverlay(active) {
    if (active) {
        overlayOn = true;
        // 지도 위에 로드뷰 도로 오버레이를 추가합니다
        map.addOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);
        // 지도 위에 마커를 표시합니다
        marker.setMap(map);
        // 마커의 위치를 지도 중심으로 설정합니다 
        marker.setPosition(map.getCenter());
        // 로드뷰의 위치를 지도 중심으로 설정합니다
        toggleRoadview(map.getCenter());
    } else {
        overlayOn = false;
        // 지도 위의 로드뷰 도로 오버레이를 제거합니다
        map.removeOverlayMapTypeId(kakao.maps.MapTypeId.ROADVIEW);
        // 지도 위의 마커를 제거합니다
        marker.setMap(null);
    }
}

// 지도 위의 로드뷰 버튼을 눌렀을 때 호출되는 함수입니다
function setRoadviewRoad() {
    var control = document.getElementById('roadviewControl');
    // 버튼이 눌린 상태가 아니면
    if (control.className.indexOf('active') === -1) {
        control.className = 'active';
        // 로드뷰 도로 오버레이가 보이게 합니다
        toggleOverlay(true);
    } else {
        control.className = '';
        // 로드뷰 도로 오버레이를 제거합니다
        toggleOverlay(false);
    }
}

// 로드뷰에서 X버튼을 눌렀을 때 로드뷰를 지도 뒤로 숨기는 함수입니다
function closeRoadview() {
    var position = marker.getPosition();
    toggleMapWrapper(true, position);
}

// 로드뷰에서 X버튼을 눌렀을 때 로드뷰를 지도 뒤로 숨기는 함수입니다
function closeRoadview() {
    var position = marker.getPosition();
    toggleMapWrapper(true, position);
}    
// 체크 박스를 선택하면 호출되는 함수입니다
function setOverlayMapTypeId() {
    var chkuseDistrict = document.getElementById('chkuseDistrict');
    // 지도 타입을 제거합니다
   for (var type in mapTypes) {
       map.removeOverlayMapTypeId(mapTypes[type]);    
   }
    // 지적편집도정보 체크박스가 체크되어있으면 지도에 지적편집도정보 지도타입을 추가합니다
    if (chkuseDistrict.checked) {
        map.addOverlayMapTypeId(mapTypes.useDistrict);    
    }
      
} 



function navi(m_name, num) {
	var m_x = parseFloat(m_showlist[num].LNG);
	var m_y = parseFloat(m_showlist[num].LAT);     
	
	Kakao.Navi.start({
      name: m_name,
      x: m_x,
      y: m_y,
      coordType: 'wgs84'
    })
}

